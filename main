#include <iostream>
#include <ctime>
#include <cstdlib>
#include <string>
#include <bits/stdc++.h> // for the string to char array stuff

void display();
std::string generateWord();
void game(char*, int, std::string);

//made these global so they wouldn't have to passed to the functions all the time
int lives = 6;
int numOfLives = 6;

int main()
{
    int choice = 0;
    char input, *answer;
    
    while (choice != 5) {
        //main menu
        std::cout << "Welcome to Hangman\n";
        std::cout << "1. 1-Player Game (PvC)\n";
        std::cout << "2. 2-Player Game (PvP)\n";
        std::cout << "3. Settings\n";
        std::cout << "4. How to Play\n";
        std::cout << "5. Quit\n";
        std::cout << "  >> ";
        std::cin >> choice;
        
        //if playing a game, intialize the word
        if (choice == 1 || choice == 2) {
            std::string word;
            
            //1-P is generated by computer using generateWord()
            if (choice == 1) {
                word = generateWord();
                std::cout << "Generating a word...\n";
            }
            //2-P is entered by one of the players
            else if (choice == 2) {
                int choice1 = 0;
                while (choice1 != 1) {
                    int answer;
                    std::cout << "Player 1\n";
                    std::cout << "Enter a word (ALL CAPS!)\n  >> ";
                    std::cin >> word;
                    std::cout << "Is this your word?\n1. Yes\n";
                    std::cout << "2. No\n  >> ";
                    std::cin >> choice1;
                }
            }
            
            //turn the string into a character array using dynamic arrays woot woot
            int size = word.length();
            answer = new char[size];
            strcpy(answer, word.c_str());
            //call the game function and start it
            game(answer, size, word);
            
        }
        else if (choice == 3) {
            //settings: change # of lives you start out with
            choice = 0;
            while (choice < 1 || choice > 2) {
                std::cout << "Lives: " << numOfLives << "\n";
                std::cout << "1. Change # of lives\n";
                std::cout << "(Warning! Display will change if lives are changed)\n";
                std::cout << "2. Quit to Main Menu\n";
                std::cout << "  >> ";
                std::cin >> choice;
            }
            
            //change # of lives or do nothing and go back into the main menu
            if (choice == 1) {
                std::cout << "Enter # of lives\n  >> ";
                std::cin >> numOfLives;
            }
            
        }
        else if (choice == 4) {
            //instructions
            std::cout << "There is a mystery word you have to guess.\n";
            std::cout << "There are blanks representing the letters, like this:\n";
            std::cout << "_ _ _ _\n";
            std::cout << "You have to guess one letter at a time or the word itself.\n";
            std::cout << "Whenever you guess a letter and it's not in the word,\n";
            std::cout << "a part of the hangman is drawn. Once they are fully drawn,\n";
            std::cout << "(the default amount of body parts are 6,\n";
            std::cout << "but that can be changed in settings ;] )\n";
            std::cout << "they are dead and you lose! :( Morbid, I know...\n";
            std::cout << "  >> \n";
        }
    }
    
    //farewall message and return 0 :')
    std::cout << "Have a nice day!\n";
    return 0;
}

void display() {
    //check if # of lives is same.................. if so keep standard display
    bool standard;
    if (numOfLives == 6) {
        standard = true;
    }
    else {
        standard = false;
    }
    
    //divider + top of gallows
    std::cout << "*********************************************************************\n";
    std::cout << "----|";
    
    //head
    std::cout << "\n|   ";
    if (standard && lives < 6) {
        std::cout << "O";
    }
    else if (!standard) {
        std::cout << lives << " tries left";
    }
    
    //arms + torso
    std::cout << "\n|  ";
    if (standard && lives < 5) {
        std::cout << "/";
    }
    
    if (standard && lives < 4) {
        std::cout << "|";
    }
    
    if (standard && lives < 3) {
        std::cout << "\\";
    }
    
    //legs
    std::cout << "\n|  ";
    if (standard && lives < 2) {
        std::cout << "/ ";
    }
    
    if (standard && lives < 1) {
        std::cout << "\\";
    }
    
    //bottom of gallows :(
    std::cout << "\n[]___\n";
}

std::string generateWord() {
    int word;
    unsigned seed = time(0);
    srand(seed);
    
    //randomizer...
    word = (rand() % 5) + 1;
    
    //some random words I thought of
    if (word == 1) {
        return "APPLESAUCE";
    }
    else if (word == 2) {
        return "THURSDAY";
    }
    else if (word == 3) {
        return "FACEBOOK";
    }
    else if (word == 4) {
        return "RHYTHM";
    }
    else if (word == 5) {
        return "JAZZ";
    }
}

void game(char* answer, int size, std::string word) {
    //just so if you play multiple games the lives counter is reset
    lives = numOfLives;
    
    //the tried array is for display purposes and checking purposes torso
    //26 elements for 26 letter ;)
    bool win = false;
    char guess;
    char tried[26];
    
    //initialize tried with blanks
    for (int j = 0; j < 26; j++) {
        tried[j] = ' ';
    }
    
    //run until win (includes break; statements of course) or run outta lives
    while (lives > 0) {
        
        display();
        
        //display letters guessed already
        std::cout << "Letters tried [";
        
        for (int i = 0; i < 26; i++) {
            std::cout << tried[i] << " "; 
        }
        std::cout << "]\n";
        
        //clarification for the old people (my parents): this is what you're guessing!
        std::cout << "The word you have to guess is ";
        
        //simultaneously displays letters guessed correctly + win condition
        int right = 0;
        
        for (int x = 0; x < size; x++) {
            //uhh I tried explaining it but I can't but trust me I know how 
            //it works I wrote it
            bool printed = false;
            for (int y = 0; y < 26; y++) {
                if (answer[x] == tried[y]) {
                    std::cout << answer[x] << " ";
                    printed = true;
                    right++;
                }
            }
            if (printed == false) {
                std::cout << "_ ";
            }
        }
        
        //win condition babey!! break outta this loop
        if (right == size) {
            win = true;
            break;
        }
        
        //guess prompt
        std::cout << "\nIf you would like to guess the full word, enter lowercase \'z\'\n";
        std::cout << "Guesses in uppercase only!\n";
        std::cout << "  >> ";
        std::cin >> guess;
        
        //if guess is lowercase z then let's gooooooooooooo
        if (guess == 122) {
            std::string choice;
            std::cout << "Guess the word (enter 0 if you want to";
            std::cout << " guess a letter instead)\n  >> ";
            std::cin >> choice;
            
            //I realized the way I programmed this that it would be annoying
            //to dock a life like ugh w/e I'm lazy and it probs wouldn't even be
            //that much work like just a bool and some if statements but I'm tired
            //of doing that so yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeet
            if (choice != word && choice != "0") {
                std::cout << "That's not the word, but w/e I won't dock your lives lol.\n";
                std::cout << "Just guess a LETTER again for this turn!\n  >> ";
                std::cin >> guess;
            }
            else if (choice == "0") {
                std::cout << "Enter your guess (letter)\n  >> ";
                std::cin >> guess;
            }
            else if (choice == word) {
                //win cond #2 eyyyyyyyy even though it's technically #1 but w/e
                std::cout << "That's it!!!! OMG!!!";
                win = true;
                break;
            }
            
        }
        
        //basically A-Z is 65-90 but the array is 0-25 obvi so subtract that babey!!
        int index = static_cast<int>(guess) - 65;
        
        //if not guessed already, then make it guessed lol!
        if (tried[index] == ' ') {
            tried[index] = guess;
        }
        else {
            //try again... or Else
            while (tried[index] != ' ') {
                std::cout << "Already guessed. Try again! (Remember UPPERCASE)\n";
                std::cout << "  >> ";
                std::cin >> guess;
                index = static_cast<int>(guess) - 65;
            }
            tried[index] = guess;
        }
        
        //honestly I forgot why I added this and I'm too afraid to delete it
        //I could like... read through it and understand what it is but... why
        //oh I think it's just checking if the guess was right so lives isn't
        //decremented :B
        int checked = false;
        for (int x = 0; x < size; x++) {
            if (guess == answer[x]) {
                checked = true;
            }
        }
        
        //yeahh so lives gone! just like my wig
        if (checked == false) {
            lives--;
        }
        
        //you lose...
        if (lives == 0) {
            win = false;
        }
        
    }
    
    //different messages depending on win/loss
    if (win == true) {
        std::cout << "\nCongrats! You win!\n";
    }
    else {
        //show off that full hangman... morbid but necessary since I worked hard on
        //that display lol
        display();
        std::cout << "Sorry... You lost.\n";
        std::cout << "The word was " << answer << "\n";
    }
    
    //ending divison bracket thing ??
    std::cout << "*********************************************************************\n";
    
}


(weird) commentless version
#include <iostream>
#include <ctime>
#include <cstdlib> 
#include <string>
#include <bits/stdc++.h> //for new function, see below

void display();
std::string generateWord();
void game(char*, int, std::string);

int lives = 6, wincount = 0, losscount = 0;
int numOfLives = 6;

int main()
{
    int choice = 0;
    char input, *answer;
    
    while (choice != 6) {
        //display main menu
        std::cout << "Welcome to Hangman\n";
        std::cout << "1. 1-Player Game (PvC)\n";
        std::cout << "2. 2-Player Game (PvP)\n";
        std::cout << "3. Settings\n";
        std::cout << "4. How to Play\n";
        std::cout << "5. Win/Loss Count\n";
        std::cout << "6. Quit\n";
        std::cout << "  >> ";
        std::cin >> choice;
        
        //if playing a game, intialize the word
        if (choice == 1 || choice == 2) {
            std::string word;
            
            //1-P is generated by computer using generateWord()
            if (choice == 1) {
                word = generateWord();
                std::cout << "Generating a word...\n";
            }
            //2-P is entered by one of the players
            else if (choice == 2) {
                int choice1 = 0;
                while (choice1 != 1) {
                    int answer;
                    std::cout << "Enter a word (ALL CAPS!)\n  >> ";
                    std::cin >> word;
                    std::cout << "Is this your word?\n1. Yes\n";
                    std::cout << "2. No\n  >> ";
                    std::cin >> choice1;
                }
            }
            
            //turn the string into a character array
            int size = word.length();
            answer = new char[size];
            strcpy(answer, word.c_str());  //https://stackoverflow.com/questions/13294067/how-to-convert-string-to-char-array-in-c
            
            //call the game function and start it
            game(answer, size, word);
            
        }
        else if (choice == 3) {
            //settings: change # of lives you start out with
            choice = 0;
            while (choice < 1 || choice > 2) {
                std::cout << "Lives: " << numOfLives << "\n";
                std::cout << "1. Change # of lives\n";
                std::cout << "(Warning! Display will change if lives are changed)\n";
                std::cout << "2. Quit to Main Menu\n";
                std::cout << "  >> ";
                std::cin >> choice;
            }
            
            //change # of lives or do nothing and go back into the main menu
            if (choice == 1) {
                std::cout << "Enter # of lives\n  >> ";
                std::cin >> numOfLives;
            }
            
        }
        else if (choice == 4) {
            //instructions
            std::cout << "There is a mystery word you have to guess.\n";
            std::cout << "There are blanks representing the letters, like this:\n";
            std::cout << "_ _ _ _\n";
            std::cout << "You have to guess one letter at a time or the word itself.\n";
            std::cout << "Whenever you guess a letter and it's not in the word,\n";
            std::cout << "a part of the hangman is drawn. Once they are fully drawn,\n";
            std::cout << "(the default amount of body parts are 6,\n";
            std::cout << "but that can be changed in settings ;] )\n";
            std::cout << "they are dead and you lose! :( Morbid, I know...\n";
            std::cout << "  >> \n";
        }
        else if (choice == 5) {
            //display win/loss count
            std::cout << "Stats:\n";
            std::cout << "Win count: " << wincount << "\n";
            std::cout << "Loss count: " << losscount << "\n";
            std::cout << "  >> \n";
        }
        else if (choice != 6) {
            //input invalidation
            std::cout << "Invalid input... try again.\n";
        }
    }
    
    //farewall message and return 0 :')
    std::cout << "Have a nice day!\n";
    return 0;
}

void display() {
    //check if # of lives is same.................. if so keep standard display
    bool standard;
    if (numOfLives == 6) {
        standard = true;
    }
    else {
        standard = false;
    }
    
    //divider + top of gallows
    std::cout << "*********************************************************************\n";
    std::cout << "----|";
    
    //head
    std::cout << "\n|   ";
    if (standard && lives < 6) {
        std::cout << "O";
    }
    else if (!standard) {
        std::cout << lives << " tries left";
    }
    
    //arms + torso
    std::cout << "\n|  ";
    if (standard && lives < 5) {
        std::cout << "/";
    }
    
    if (standard && lives < 4) {
        std::cout << "|";
    }
    
    if (standard && lives < 3) {
        std::cout << "\\";
    }
    
    //legs
    std::cout << "\n|  ";
    if (standard && lives < 2) {
        std::cout << "/ ";
    }
    
    if (standard && lives < 1) {
        std::cout << "\\";
    }
    
    //bottom of gallows
    std::cout << "\n[]____\n";
}

std::string generateWord() {
    int word;
    unsigned seed = time(0);
    srand(seed);
    
    //randomizer...
    word = (rand() % 9) + 1;
    
    //some random words I thought of
    if (word == 1) {
        return "APPLESAUCE";
    }
    else if (word == 2) {
        return "THURSDAY";
    }
    else if (word == 3) {
        return "FACEBOOK";
    }
    else if (word == 4) {
        return "RHYTHM";
    }
    else if (word == 5) {
        return "JAZZ";
    }
    else if (word == 6) {
        return "PHANTOM";
    }
    else if (word == 7) {
        return "XYLOPHONE";
    }
    else if (word == 8) {
        return "AWKWARD";
    }
    else if (word == 9) {
        return "BAGPIPES";
    }
}

void game(char* answer, int size, std::string word) {
    //just so if you play multiple games the lives counter is reset
    lives = numOfLives;
    
    //the tried array is for display and checking purposes
    //26 elements for 26 letters
    bool win = false;
    char guess;
    char tried[26];
    
    //initialize tried with blanks
    for (int j = 0; j < 26; j++) {
        tried[j] = ' ';
    }
    
    //run until win or run out of lives
    while (lives > 0) {
        
        display();
        
        //display letters guessed already
        std::cout << "Letters tried [";
        
        for (int i = 0; i < 26; i++) {
            std::cout << tried[i] << " "; 
        }
        std::cout << "]\n";
        
        //clarification: this is what you're guessing!
        std::cout << "The word you have to guess is: ";
        
        //displays letters guessed correctly
        int right = 0;
        
        for (int x = 0; x < size; x++) {
            bool printed = false;
            for (int y = 0; y < 26; y++) {
                if (answer[x] == tried[y]) {
                    std::cout << answer[x] << " ";
                    printed = true;
                    right++;
                }
            }
            if (printed == false) {
                std::cout << "_ ";
            }
        }
        
        //win condition - if all the correct letters are entered
        if (right == size) {
            win = true;
            break;
        }
        
        //guess prompt
        std::cout << "\nIf you would like to guess the full word, enter lowercase \'z\'\n";
        std::cout << "Guesses in uppercase only!\n";
        std::cout << "  >> ";
        std::cin >> guess;
        
        //if guess is lowercase z then guess full word
        if (guess == 122) {
            std::string choice;
            std::cout << "Guess the word (enter 0 if you want to";
            std::cout << " guess a letter instead)\n  >> ";
            std::cin >> choice;
            
            if (choice != word && choice != "0") {
                std::cout << "That's not the word, but w/e I won't dock your lives lol.\n";
                std::cout << "Just guess a letter again for this turn!\n  >> ";
                std::cin >> guess;
            }
            else if (choice == "0") {
                std::cout << "Enter your guess (letter)\n  >> ";
                std::cin >> guess;
            }
            else if (choice == word) {
                //win
                std::cout << "That's it!!!! OMG!!!";
                win = true;
                break;
            }
            
        }
        
        //basically A-Z is 65-90 but the array is 0-25 so subtract by 65
        int index = static_cast<int>(guess) - 65;
        
        //if not guessed already, then make it guessed
        if (tried[index] == ' ') {
            tried[index] = guess;
        }
        else {
            //try again... or Else
            while (tried[index] != ' ') {
                std::cout << "Already guessed. Try again! (Remember UPPERCASE)\n";
                std::cout << "  >> ";
                std::cin >> guess;
                index = static_cast<int>(guess) - 65;
            }
            tried[index] = guess;
        }
        
        int checked = false;
        for (int x = 0; x < size; x++) {
            if (guess == answer[x]) {
                checked = true;
            }
        }
        
        //lose a life if guessed incorrectly
        if (checked == false) {
            lives--;
        }
        
        //you lose...
        if (lives == 0) {
            win = false;
        }
        
    }
    
    //different messages depending on win/loss
    if (win == true) {
        std::cout << "\nCongrats! You win!\n";
        wincount++;
    }
    else {
        display();
        std::cout << "Sorry... You lost.\n";
        std::cout << "The word was " << answer << "\n";
        losscount++;
    }
    
    //ending divison bracket
    std::cout << "*********************************************************************\n";
}
